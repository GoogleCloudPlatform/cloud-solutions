// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";
package binpacker;

option go_package = "github.com/GoogleCloudPlatform/cloud-solutions/projects/sa-tools/gke_optimization/binpacker/api/proto";

// The schema of an API to calculate a bin packing recommendation for provided resource requests.
message BinpackingCalculateRequest {
    // A repeated field of Workload messages.
    // Each Workload message contains resource request.
    repeated Workload workloads = 1;

    // The minimum number of nodes for the calculation.
    int32 min_num_nodes = 2;
}

// The schema of an API error response that indicates an error occurred while calculating a bin packing recommendation.
message BinpackingCalculateErrorResponse {
    // The error message.
    // A brief description of the error.
    string message = 1;

    // The error details.
    // More detailed information about the error, such as the stack trace.
    string details = 2;
}

// A workload is a unit of work that can be scheduled on a node.
message Workload {
    // The CPU request for the workload.
    // This is the minimum amount of CPU resources that the workload must have.
    double cpu_request = 1;

    // The CPU limit for the workload.
    // This is the maximum amount of CPU resources that the workload can use.
    double cpu_limit = 2;

    // The memory request for the workload.
    // This is the minimum amount of memory resources that the workload must have.
    int64 memory_request = 3;

    // The memory limit for the workload.
    // This is the maximum amount of memory resources that the workload can use.
    int64 memory_limit = 4;
}

// The schema of an API response that contains the result of the bin packing calculation.
message BinpackingCalculateResponse {
    // The recommended number of nodes and the amount of resources allocated to each node.
    BinpackingRecommendation recommendation = 1;

    // The details of the original request, including the maximum CPU and memory limits,
    // and the total CPU and memory requests.
    BinpackingRequestDetail request_detail = 2;

    // A breakdown of the recommended resources, including the amount of CPU and memory
    // used by the workloads, the amount of CPU and memory reserved for the system,
    // and the amount of CPU and memory available for user workloads.
    RecommendationBreakdown recommendation_breakdown = 3;
}

// The recommended number of nodes and the amount of resources allocated to each node.
message BinpackingRecommendation {
    // The amount of vCPU for a single node.
    double cpu = 1;

    // The amount of memory for a single node.
    double memory = 2;

    // The number of nodes recommended.
    int32 num_nodes = 3;
}

// The details of the original request, including the maximum CPU and memory limits,
// and the total CPU and memory requests.
message BinpackingRequestDetail {
    // The maximum CPU limit for all workloads.
    double max_cpu_limit = 1;

    // The total CPU request for all workloads.
    double total_cpu_request = 2;

    // The maximum memory limit for all workloads.
    int64 max_memory_limit = 3;

    // The total memory request for all workloads.
    int64 total_memory_request = 4;
}

// A breakdown of the recommended resources, including the amount of CPU and memory
// used by the workloads, the amount of CPU and memory reserved for the system,
// and the amount of CPU and memory available for user workloads.
message RecommendationBreakdown {
    // A breakdown of the CPU resources, including the amount used by the workloads,
    // the amount reserved for the system, and the amount available for user workloads.
    CpuBreakdown cpu = 1;

    // A breakdown of the memory resources, including the amount used by the workloads,
    // the amount reserved for the system, and the amount available for user workloads.
    MemoryBreakdown memory = 2;
}


// A breakdown of the CPU resources, including the amount used by the workloads,
// the amount reserved for the system, and the amount available for user workloads.
message CpuBreakdown {
    // The amount of CPU resources per node.
    double node_size = 1;

    // The amount of CPU resources reserved for the system.
    double reserved = 2;

    // The amount of CPU resources used by the system.
    double system_usage = 3;

    // The amount of CPU resources available for user workloads.
    double capacity_user_workloads = 4;
}

// A breakdown of the memory resources, including the amount used by the workloads,
// the amount reserved for the system, and the amount available for user workloads.
message MemoryBreakdown {
    // The amount of memory resources per node.
    int64 node_size = 1;

    // The amount of memory resources used by the kernel.
    int64 kernel_usage = 2;

    // The amount of memory resources reserved for the system.
    int64 reserved = 3;

    // The eviction threshold for memory resources.
    int64 eviction_threshold = 4;

    // The amount of memory resources used by the system.
    int64 system_usage = 5;

    // The amount of memory resources available for user workloads.
    int64 capacity_user_workloads = 6;
}
