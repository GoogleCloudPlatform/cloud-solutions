/*
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import org.gradle.api.tasks.testing.logging.TestExceptionFormat

plugins {
    id "java"
    id "com.google.cloud.tools.jib" version "3.4.3"
    id 'org.springframework.boot' version "${springBootVersion}"
    id "com.google.protobuf" version "0.9.4"
    id "idea"
}

version "0.1"

dependencies {
    // Proto
    compileOnly "com.google.api.grpc:proto-google-common-protos:2.42.0"
    implementation "com.google.api.grpc:grpc-google-cloud-pubsub-v1:1.114.0"
    implementation "com.google.protobuf:protobuf-java:${protoVersion}"
    implementation "com.google.protobuf:protobuf-java-util:${protoVersion}"

    // Proto definitions
    protobuf files("../proto")

    // SA-Tools Commons
    implementation "com.google.cloud.solutions.satools.common:utils"
    implementation "com.google.cloud.solutions.satools.common:spring-boot-auth"

    // Commons library deps
    implementation "com.google.code.gson:gson:2.11.0"
    implementation "com.google.guava:guava:${guavaVersion}"
    implementation "org.apache.commons:commons-lang3:3.15.0"
    implementation "org.apache.commons:commons-text:1.12.0"

    // Objectify
    implementation "com.google.cloud.solutions.satools.common:objectify-util"

    // Google Cloud
    implementation "com.google.cloud:google-cloud-build:3.49.0"
    implementation "com.google.cloud:google-cloud-storage:2.41.0"
    implementation "com.google.cloud:google-cloud-bigquery:2.42.0"


    // Logging framework
    implementation "com.google.flogger:flogger:${floggerVersion}"
    implementation "com.google.flogger:google-extensions:${floggerVersion}"
    runtimeOnly "com.google.flogger:flogger-system-backend:${floggerVersion}"

    //Spring Boot
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor:${springBootVersion}"
    implementation ("org.springframework.boot:spring-boot-starter-web:${springBootVersion}") {
        exclude group: "org.yaml", module: "snakeyaml"
    }


    testImplementation "com.google.cloud.solutions.satools.common:testing"
    testImplementation "com.google.cloud.solutions.satools.common:objectify-testing"
    testImplementation "com.google.cloud.solutions.satools.common:spring-boot-auth-testing"

    testImplementation "org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}"

    testImplementation ("org.springframework.boot:spring-boot-starter-test:${springBootVersion}")
    testImplementation "com.google.truth:truth:1.4.4"
    testImplementation "com.google.truth.extensions:truth-java8-extension:1.4.4"
    testImplementation "com.google.truth.extensions:truth-proto-extension:1.4.4"
    testImplementation "commons-io:commons-io:2.16.1"
    testImplementation "org.apache.commons:commons-csv:1.11.0"
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

tasks.withType(ProcessResources) {
    dependsOn(":ui:yarn_build")
    from ("../ui/dist") {
        into("public")
    }
}

tasks.findByName("clean").dependsOn(":ui:clean")

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
        showStandardStreams = true
        exceptionFormat = TestExceptionFormat.FULL
    }
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:${protoVersion}"
    }
    clean {
        delete protobuf.generatedFilesBaseDir
    }
}

java.sourceCompatibility = JavaVersion.VERSION_21
java.targetCompatibility = JavaVersion.VERSION_21

jib {
    from {
        image = 'registry://eclipse-temurin:17-jre-alpine'
    }

    container {
        jvmFlags=List.of('-Dspring.profiles.active=production')
    }
}
